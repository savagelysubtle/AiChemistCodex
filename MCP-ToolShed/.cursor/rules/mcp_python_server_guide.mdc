---
description:
globs: **/*.py
alwaysApply: false
---
# MCP Python Server Development Guide

This guide highlights common patterns and best practices for developing Model Context Protocol (MCP) servers using the Python SDK, particularly with `FastMCP`.

Refer to `[main.py](mdc:ToolRack/local-file-ingest/src/local_file_ingest/main.py)` and `[pyproject.toml](mdc:ToolRack/local-file-ingest/pyproject.toml)` from the `mcp-local-file-inspector` tool for concrete examples of these patterns.

## Key Components & Patterns:

### 1. Server Initialization
MCP servers are typically initialized using `FastMCP` from `mcp.server.fastmcp`.
Look for instantiation like:
```python
from mcp.server.fastmcp import FastMCP
mcp = FastMCP(name="My Server Name", dependencies=[], instructions="...")
```
The `[main.py](mdc:ToolRack/local-file-ingest/src/local_file_ingest/main.py)` in the `local-file-ingest` tool provides a good example of this.

### 2. Tool Definition
Tools are defined as Python functions and decorated with `@mcp.tool()`.
Example:
```python
@mcp.tool()
def my_tool_function(args: MyToolArgs) -> MyToolOutput:
    # Tool logic here
    pass
```
See `local_directory_structure` and `local_read_files` in `[main.py](mdc:ToolRack/local-file-ingest/src/local_file_ingest/main.py)`.

### 3. Input Validation with Pydantic
Tool arguments should be defined as Pydantic models for robust validation. These models inherit from `pydantic.BaseModel`.
```python
from pydantic import BaseModel

class MyToolArgs(BaseModel):
    parameter_one: str
    parameter_two: int
    # Add field descriptions and validation as needed
```
The tool function then type-hints its argument with this Pydantic model. `FastMCP` handles the validation.
`[main.py](mdc:ToolRack/local-file-ingest/src/local_file_ingest/main.py)` demonstrates this with `LocalDirectoryStructureArgs` and `LocalReadFilesArgs`.

### 4. Logging
Use the MCP logger for consistent logging within your server:
```python
from mcp.server.fastmcp.utilities.logging import get_logger
logger = get_logger(__name__) # Use __name__ for module-specific logger
logger.info("My log message")
```
This is used throughout `[main.py](mdc:ToolRack/local-file-ingest/src/local_file_ingest/main.py)`.

### 5. CLI Entry Point
A common pattern for allowing the server to be run as a script is:
```python
def cli_main():
    logger.info("Starting MCP Server...")
    mcp.run() # Or mcp.run_sse(), mcp.run_websocket() depending on transport

if __name__ == "__main__":
    cli_main()
```
This pattern is used at the end of `[main.py](mdc:ToolRack/local-file-ingest/src/local_file_ingest/main.py)`. The `pyproject.toml` then typically defines a script in `[project.scripts]` that points to this `cli_main` function.

### 6. Path Handling (for file-related tools)
When dealing with file system paths, especially those provided by users:
- Use `pathlib.Path` for robust, cross-platform path manipulation.
- Resolve paths to their absolute form (e.g., `Path(user_path_str).resolve(strict=True)`).
- Perform necessary validation (e.g., `.exists()`, `.is_dir()`, `.is_file()`).
- Implement security checks to prevent path traversal (e.g., disallowing `..` in relative paths intended to be within a specific base directory).
`[main.py](mdc:ToolRack/local-file-ingest/src/local_file_ingest/main.py)` extensively uses `pathlib` and demonstrates these practices.

### 7. Configuration (`pyproject.toml`)
For MCP servers intended to be packaged and distributed:
- **Dependencies**: List `mcp` and other necessary packages like `pydantic` under `[project].dependencies`.
- **Scripts**: Define a script entry point in `[project.scripts]` that maps a command-line tool name to your `cli_main` function (e.g., `my-mcp-server = "my_package.main:cli_main"`).
- **Build System**: Configure your build backend (e.g., `uv_build`, `hatchling`). If using `setuptools` (often via `uv_build`), ensure `[tool.setuptools.packages.find]` is correctly configured to find your package in `src/`.
- **Linters/Formatters**: Include configurations for tools like `Pyright` and `Ruff` to maintain code quality.
Refer to `[pyproject.toml](mdc:ToolRack/local-file-ingest/pyproject.toml)` for a practical example.

This rule applies globally to Python files (`**/*.py`) to assist with understanding and developing MCP servers within this workspace.


