---
description: WHEN working WITH PUPPETEER
globs:
alwaysApply: false
---
<cursor-rule>
  <title>Puppeteer (JavaScript) Prompting Guide</title>
  <version>1.0.0</version>

  <context>
    <usage>Use this guide when requesting AI assistance specifically for Puppeteer (JavaScript/Node.js) tasks within the WebCrawler project.</usage>
    <objective>To get targeted help for writing Puppeteer scripts, handling dynamic content, interacting with pages (primarily Chromium), and managing configuration.</objective>
    <reference>Consult the Puppeteer section in the research doc: [Puppeteer Research](mdc:WebCrawler/scraping_libraries_research.md#3-puppeteer-javascriptnodejs)</reference>
    <note>Puppeteer's API is very similar to Playwright's JavaScript API, but primarily targets Chromium.</note>
  </context>

  <requirements>
    <requirement>
      <name>Script Generation/Modification</name>
      <description>Ask for a new script structure (using `async/await`) or modifications to an existing `.js` file. Specify the target URL and headless mode preference.</description>
      <example>
        <good>"Create a basic Puppeteer script (`scraper.js`) in headless mode to navigate to `https://example.com`."</good>
      </example>
    </requirement>
    <requirement>
      <name>Navigation and Waiting</name>
      <description>Specify the URL for `page.goto()`. If dealing with dynamic content, mention the specific element (`page.waitForSelector(...)`), network condition (`page.waitForNavigation(...)`), function (`page.waitForFunction(...)`), or timeout (`page.waitForTimeout(...)`) needed before proceeding.</description>
      <example>
        <good>"After navigating to the page, wait for the element with id `#content` to appear before extracting data."</good>
      </example>
    </requirement>
    <requirement>
      <name>Element Selection</name>
      <description>Provide HTML snippets and ask for selectors to use with `page.$(selector)` (single) or `page.$$(selector)` (multiple).</description>
      <example>
        <good>"What Puppeteer selector can I use to select all `div` elements with the class `item`?"</good>
      </example>
    </requirement>
    <requirement>
      <name>Data Extraction</name>
      <description>Explain how to extract data using methods like `elementHandle.getProperty('innerText')`, `elementHandle.evaluate(el => el.textContent)`, or complex extraction within `page.evaluate()`.</description>
       <example>
        <good>"Using `page.evaluate()`, extract the `href` attribute from all `a` tags inside the element with id `results`."</good>
      </example>
    </requirement>
    <requirement>
      <name>Page Interaction</name>
      <description>Ask for help with actions like `page.click(selector)`, `page.type(selector, text)`, `page.select(selector, value)`, or `page.keyboard.press(key)`.</description>
      <example>
        <good>"Show me how to type `testuser` into the input field with name `username` and then click the button with id `submit-button` using Puppeteer."</good>
      </example>
    </requirement>
    <requirement>
      <name>JSON Configuration Integration</name>
      <description>Request help reading a `config.json` file using Node.js `fs` module and applying settings like `startUrl`, `browserOptions` (passed to `puppeteer.launch`), or timeouts (`setDefaultNavigationTimeout`, `setDefaultTimeout`).</description>
      <reference>See [JSON Integration Example](mdc:WebCrawler/scraping_libraries_research.md#33-json-based-configuration-integration-javascript)</reference>
    </requirement>
    <requirement>
      <name>Manual Politeness</name>
      <description>Since Puppeteer lacks built-in politeness, ask for adding delays using `page.waitForTimeout(milliseconds)` or `new Promise(r => setTimeout(r, ms))` between requests or actions if needed.</description>
    </requirement>
  </requirements>

  <examples>
    <good-practice>
      <description>A specific request for Puppeteer interaction.</description>
      <example>
"In my Puppeteer script, after `page.goto(url)`, I need to wait for the element with selector `button.load-more` to be visible. Then, click it and wait for 2 seconds using `page.waitForTimeout`. Finally, extract the text from all elements matching `.product-name`."
      </example>
    </good-practice>
    <bad-practice>
      <description>A vague request lacking Puppeteer context.</description>
      <example>
"Click the button and get the names."
      </example>
    </bad-practice>
  </examples>

</cursor-rule>
