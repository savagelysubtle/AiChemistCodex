# MCP ToolShed Refactoring Plan (Revised)

This plan outlines the steps to refactor the MCP servers in the `ToolRack/` directory. It prioritizes establishing a standardized environment, creating and building shared utility packages, and then integrating these into the tools.

**Goal:** Improve maintainability, reduce code duplication, and establish consistent practices across all MCP tools in the `ToolRack/`.

**Assumptions:**
*   Development environment is Windows with PowerShell.
*   `git`, `uv`, `node`, `npm` (or `yarn`/`pnpm`) are installed and accessible in the PATH.
*   TypeScript tools will use `npm` for package management unless otherwise specified.

---

## Phase 0: Workspace & Environment Foundation

**Purpose:** Set up the Git repository, core directories, and root-level configurations.

*   **Step 0.1: Ensure Git & Create Branch**
    *   Verify the project is a Git repository. If not, initialize it (`git init`).
    *   Commit any outstanding changes.
    ```powershell
    git status
    # If changes exist:
    git add .
    git commit -m "feat: Prepare for ToolRack refactoring and environment setup"
    ```
    *   Create a new branch for this refactoring work.
    ```powershell
    git checkout -b feat/refactor-toolrack-env-first
    ```

*   **Step 0.2: Create Core Directories**
    *   Create top-level directories for Utilities and Logs.
    ```powershell
    New-Item -ItemType Directory -Path ./Utils -ErrorAction SilentlyContinue
    New-Item -ItemType Directory -Path ./Logs -ErrorAction SilentlyContinue
    ```

*   **Step 0.3: Establish Root `.env.example`**
    *   Create an example environment file at the workspace root. Users will copy this to `.env` and populate secrets.
    ```powershell
    $envExampleContent = @'
    # Common Environment Variables for TheToolShed
    # Copy this file to .env and fill in your actual values.
    # --- Global Settings ---
    LOG_LEVEL=INFO

    # --- Brave Search (ToolRack/brave-search) ---
    BRAVE_API_KEY=YOUR_BRAVE_API_KEY_HERE

    # --- Other API Keys or Configs ---
    # ANOTHER_SERVICE_API_KEY=
    '@
    Set-Content -Path ./.env.example -Value $envExampleContent -Force
    # Add .env to .gitignore if not already present
    If (-Not (Select-String -Path ./.gitignore -Pattern "^\.env$" -Quiet)) { Add-Content -Path ./.gitignore -Value ".env" }
    ```

*   **Step 0.4: Establish Root `ruff.toml`**
    *   Create a root `ruff.toml` for consistent Python linting and formatting across all Python sub-projects.
    ```powershell
    $ruffTomlContent = @'
    # Root Ruff configuration for TheToolShed
    # https://docs.astral.sh/ruff/configuration/
    line-length = 88
    indent-width = 4

    [lint]
    select = ["E", "F", "W", "I", "UP"] # Errors, Pyflakes, Pycodestyle, Isort, Pyupgrade
    ignore = []

    [format]
    quote-style = "double"
    indent-style = "space"
    skip-magic-trailing-comma = false
    line-ending = "auto"
    '@
    Set-Content -Path ./ruff.toml -Value $ruffTomlContent -Force
    ```
    *   *Note:* Individual Python projects might extend or override these settings in their own `pyproject.toml` under `[tool.ruff]`.

*   **Step 0.5: Note on `uv` Configuration**
    *   `uv` project configuration (dependencies, scripts) resides within each Python project's `pyproject.toml`. There is no standard root `uv.toml` for workspace-wide project definitions in the way `ruff.toml` works.
    *   Ensure all Python projects (utilities and tools) will be initialized with `uv init` and use `uv` for dependency management as per rule `801-python-environment`.

---

## Phase 1: Implement and Build Python Shared Utilities (`thetoolshed_mcp_utils_py`)

**Purpose:** Create, fully implement, and prepare the shared library for common Python MCP server tasks.

*   **Step 1.1: Create Package Structure**
    ```powershell
    New-Item -ItemType Directory -Path ./Utils/thetoolshed_mcp_utils_py -ErrorAction SilentlyContinue
    New-Item -ItemType Directory -Path ./Utils/thetoolshed_mcp_utils_py/src -ErrorAction SilentlyContinue
    New-Item -ItemType Directory -Path ./Utils/thetoolshed_mcp_utils_py/src/thetoolshed_mcp_utils_py -ErrorAction SilentlyContinue
    New-Item -ItemType File -Path ./Utils/thetoolshed_mcp_utils_py/src/thetoolshed_mcp_utils_py/__init__.py -Force
    ```

*   **Step 1.2: Initialize Python Package with `uv`**
    ```powershell
    cd ./Utils/thetoolshed_mcp_utils_py
    uv init --no-prompt
    # Manually edit pyproject.toml:
    #   - name = "thetoolshed_mcp_utils_py"
    #   - version = "0.1.0"
    #   - description = "Shared utilities for Python MCP servers in TheToolShed."
    #   - authors = [{name = "Your Name", email = "your.email@example.com"}]
    #   - Add other relevant metadata.
    #   - Ensure it has a [tool.ruff] section or will inherit from root ruff.toml.
    cd ../..
    ```

*   **Step 1.3: Add Dependencies**
    ```powershell
    cd ./Utils/thetoolshed_mcp_utils_py
    uv add python-dotenv "mcp>=1.0.0" # For MCP SDK and .env loading
    cd ../..
    ```

*   **Step 1.4: Implement Config Helper (`config.py`)**
    *   Create `./Utils/thetoolshed_mcp_utils_py/src/thetoolshed_mcp_utils_py/config.py`.
    *   Implement function(s) to load environment variables from `.env` (at workspace root or tool root), providing easy access to configuration values.
    *   Example: `def get_env_var(var_name: str, default: Optional[str] = None) -> Optional[str]:`

*   **Step 1.5: Implement Logging Helper (`logging_utils.py`)**
    *   Create `./Utils/thetoolshed_mcp_utils_py/src/thetoolshed_mcp_utils_py/logging_utils.py`.
    *   Implement function(s) to configure standardized logging (e.g., `setup_logging(service_name: str, log_level_env_var: str = "LOG_LEVEL")`).
    *   Allow configuration for console output (for MCP stdio) and optional file output to the central `./Logs` directory (e.g., `./Logs/<service_name>.log`).
    *   Integrate with MCP's `Context.log` if feasible or provide clear guidance on using standard Python logging which MCP can capture.

*   **Step 1.6: Implement MCP Server Boilerplate (Optional but Recommended)**
    *   Consider creating helper functions or a base class for quickly setting up a `FastMCP` server with standard configuration and logging already integrated.

*   **Step 1.7: Update `__init__.py`**
    *   Export key functions from `config.py` and `logging_utils.py`.
    *   Example: `from .config import get_env_var`

*   **Step 1.8: Add `README.md`**
    *   Create `./Utils/thetoolshed_mcp_utils_py/README.md` explaining purpose, setup (as an editable install), and usage of the utilities.

*   **Step 1.9: Test Utilities (Unit Tests Recommended)**
    *   Add basic unit tests for the utility functions, especially config loading and logging setup.

---

## Phase 2: Implement and Build TypeScript Shared Utilities (`@thetoolshed/mcp-utils-ts`)

**Purpose:** Create, fully implement, and build the shared library for common TypeScript MCP server tasks.

*   **Step 2.1: Create Package Structure**
    ```powershell
    New-Item -ItemType Directory -Path ./Utils/thetoolshed-mcp-utils-ts -ErrorAction SilentlyContinue
    New-Item -ItemType Directory -Path ./Utils/thetoolshed-mcp-utils-ts/src -ErrorAction SilentlyContinue
    ```

*   **Step 2.2: Initialize TypeScript Package**
    ```powershell
    cd ./Utils/thetoolshed-mcp-utils-ts
    npm init -y
    # Edit package.json generated by npm init -y:
    #   - Set "name": "@thetoolshed/mcp-utils-ts"
    #   - Set "version": "0.1.0"
    #   - Set "description": "Shared utilities for TypeScript MCP servers in TheToolShed."
    #   - Set "type": "module"
    #   - Set "main": "dist/index.js"
    #   - Set "types": "dist/index.d.ts"
    #   - Add "scripts": { "build": "tsc", "watch": "tsc -w" }
    #   - Add "files": ["dist"]
    npm install typescript @types/node dotenv @modelcontextprotocol/sdk --save # SDK as a direct dependency
    npm install rimraf --save-dev # For cleaning dist folder
    # Update build script in package.json to "build": "rimraf ./dist && tsc"
    npx tsc --init --outDir dist --rootDir src --declaration true --sourceMap true --module NodeNext --target ES2020 --moduleResolution NodeNext --esModuleInterop true --resolveJsonModule true
    cd ../..
    ```

*   **Step 2.3: Implement Config Helper (`src/config.ts`)**
    *   Create `./Utils/thetoolshed-mcp-utils-ts/src/config.ts`.
    *   Implement functions to load environment variables using `dotenv`, searching for `.env` at workspace root or tool root.
    *   Example: `export function getEnvVar(varName: string, defaultValue?: string): string | undefined;`

*   **Step 2.4: Implement Logging Helper (`src/logging.ts`)**
    *   Create `./Utils/thetoolshed-mcp-utils-ts/src/logging.ts`.
    *   Implement basic logging functions (e.g., `info`, `warn`, `error`) that wrap `console.log/error` with standardized formatting (timestamps, service name).
    *   Consider how these logs will be captured by MCP hosts (stdio is common). File logging to `./Logs` could be an optional feature.

*   **Step 2.5: Create Main Export (`src/index.ts`)**
    *   Export all utility functions from `config.ts`, `logging.ts`, etc.
    *   Example: `export * from './config'; export * from './logging';`

*   **Step 2.6: Build Utilities**
    ```powershell
    cd ./Utils/thetoolshed-mcp-utils-ts
    npm run build
    cd ../..
    ```

*   **Step 2.7: Add `README.md`**
    *   Create `./Utils/thetoolshed-mcp-utils-ts/README.md` explaining purpose, setup (how other projects can link or install it), and usage.

*   **Step 2.8: Test Utilities (Unit Tests Recommended)**
    *   Add basic unit tests.

---

## Phase 3: Refactor `local-file-ingest` (Python)

**Purpose:** Integrate the fully developed shared Python utilities.

*   **Step 3.1: Add Shared Utils Dependency (Editable Install)**
    ```powershell
    cd ./ToolRack/local-file-ingest
    # Ensure its pyproject.toml is uv-compatible or run `uv init` if it's very old.
    uv add --editable ../../Utils/thetoolshed_mcp_utils_py
    cd ../..
    ```

*   **Step 3.2: Integrate Config Loading**
    *   Modify `src/local_file_ingest/main.py` (or relevant files) to import and use `get_env_var` (or similar) from `thetoolshed_mcp_utils_py.config`.
    *   Remove any direct `dotenv` usage from the tool itself.

*   **Step 3.3: Integrate Logging**
    *   In `src/local_file_ingest/main.py`, import and call `setup_logging` from `thetoolshed_mcp_utils_py.logging_utils` at the start of the application.
    *   Replace existing logging configuration and calls with standard Python `logging` module calls (e.g., `logger.info()`).

*   **Step 3.4: Update `mcp.json.example` (Verify Paths)**
    *   Find the `local-file-ingest` entry.
    *   **Crucially, ensure `command` points to the *absolute path* of the correct `uv.exe` in its Python environment (e.g., `D:\Coding\TheToolShed\ToolRack\local-file-ingest\.venv\Scripts\uv.exe` if it has its own venv, or a globally accessible `uv.exe`). Use `(Get-Command uv).Source` or `where.exe uv` in the correct context to find the path.
    *   Ensure the `--directory` argument uses the *absolute path* to `D:\Coding\TheToolShed\ToolRack\local-file-ingest`.
    *   Example after obtaining full path for `uv.exe` for this specific tool's venv:
      ```json
      "local-file-ingest": {
        "command": "D:\Coding\TheToolShed\ToolRack\local-file-ingest\.venv\Scripts\uv.exe", // Example: Absolute path to uv in tool's venv
        "type": "stdio",
        "args": [
          "run", // Assuming uv run within the project's venv
          "python",
          "-m",
          "local_file_ingest.main"
        ],
        "cwd": "D:\Coding\TheToolShed\ToolRack\local-file-ingest", // Set CWD
        "enabled": true
      }
      ```
    *   *Alternatively, if using a global `uv` to run from a specific directory that has its own venv activated by `uv run`*:
      ```json
      "local-file-ingest": {
        "command": "C:\Users\YourUser\.cargo\bin\uv.exe", // Absolute path to global uv
        "type": "stdio",
        "args": [
          "--directory",
          "D:\Coding\TheToolShed\ToolRack\local-file-ingest", // Absolute Path to tool
          "run",
          "python",
          "-m",
          "local_file_ingest.main"
        ],
        "enabled": true
      }
      ```

*   **Step 3.5: Test**
    *   Activate the tool's virtual environment if it has one (`cd ./ToolRack/local-file-ingest; .\.venv\Scripts\Activate.ps1`).
    *   Run the server using the updated command from `mcp.json.example` (or directly via `uv run python -m local_file_ingest.main` from its directory).
    *   Test functionality and check logs (console and potentially `./Logs/local-file-ingest.log`).

---

## Phase 4: Refactor `brave-search` (TypeScript)

**Purpose:** Integrate the fully developed shared TypeScript utilities.

*   **Step 4.1: Add Shared Utils Dependency**
    ```powershell
    cd ./ToolRack/brave-search
    # Use npm link for local development to ensure you're using the built version from Utils
    # 1. In ./Utils/thetoolshed-mcp-utils-ts:
    #    npm link
    # 2. In ./ToolRack/brave-search:
    #    npm link @thetoolshed/mcp-utils-ts
    # OR, if not using link, ensure you install from the file path AFTER the utils are built:
    # npm install ../../Utils/thetoolshed-mcp-utils-ts
    cd ../..
    ```

*   **Step 4.2: Integrate Config Loading**
    *   Modify `src/index.ts` (or relevant files) to import and use `getEnvVar` from `@thetoolshed/mcp-utils-ts` to load `BRAVE_API_KEY`.

*   **Step 4.3: Integrate Logging**
    *   Replace `console.log`/`console.error` calls with the shared logging functions (e.g., `logger.info()`) from `@thetoolshed/mcp-utils-ts`.

*   **Step 4.4: Update `mcp.json.example` (Verify Paths)**
    *   Find the `brave-search-Global` entry.
    *   Ensure `command` uses the *absolute path* to `node.exe` (e.g., `(Get-Command node).Source`).
    *   Ensure the first argument in `args` is the *absolute path* to the built `dist/index.js` within `ToolRack/brave-search/`.
    *   Example:
      ```json
      "brave-search-Global": {
        "command": "C:\Program Files\nodejs\node.exe", // Absolute Path
        "type": "stdio",
        "args": [
          "D:\Coding\TheToolShed\ToolRack\brave-search\dist\index.js" // Absolute Path
        ],
        "cwd": "D:\Coding\TheToolShed\ToolRack\brave-search", // Set CWD
        "env": {
          "BRAVE_API_KEY": "YOUR_KEY_HERE"
        }
      }
      ```

*   **Step 4.5: Test**
    *   Ensure utils are built (`cd ./Utils/thetoolshed-mcp-utils-ts; npm run build; cd ../..`).
    *   Rebuild the `brave-search` server (`cd ./ToolRack/brave-search; npm run build; cd ../..`).
    *   Run using the command from `mcp.json.example` (or `node dist/index.js` from its directory). Test functionality and logs.

---

## Phase 5: Refactor `cursor-mcp-installer` (TypeScript)

**Purpose:** Integrate shared TypeScript utilities.

*   **Step 5.1: Add Shared Utils Dependency**
    ```powershell
    cd ./ToolRack/cursor-mcp-installer
    # Use npm link as in Phase 4.1, or install from file path
    # npm link @thetoolshed/mcp-utils-ts
    # OR
    # npm install ../../Utils/thetoolshed-mcp-utils-ts
    cd ../..
    ```

*   **Step 5.2: Integrate Config Loading** (If any custom config is used)
    *   Adapt as necessary using shared utils.

*   **Step 5.3: Integrate Logging**
    *   Replace `console.log`/etc. with shared logging functions.

*   **Step 5.4: Update `mcp.json.example` (Verify Paths)**
    *   Find the `MCP Installer-Global` entry.
    *   Ensure `command` uses the *absolute path* to `node.exe`.
    *   Ensure `args` points to the *absolute path* of its main script (e.g., `lib/index.mjs` or `dist/index.js` depending on its build).
    *   Example:
      ```json
      "MCP Installer-Global": {
        "command": "C:\Program Files\nodejs\node.exe", // Absolute Path
        "type": "stdio",
        "args": ["D:\Coding\TheToolShed\ToolRack\cursor-mcp-installer\lib\index.mjs"], // Absolute Path
        "cwd": "D:\Coding\TheToolShed\ToolRack\cursor-mcp-installer" // Set CWD
      }
      ```

*   **Step 5.5: Test**
    *   Ensure utils are built. Rebuild the installer if it has a build step.
    *   Test its functionality (e.g., within Cursor). Check logs.

---

## Phase 6 & 7: Refactor Remaining Tools (`win-cli-tool`, `web-crawler`)

**Purpose:** Apply standardization to the remaining tools.

*   **Step 6.1 / 7.1: Determine Language & Structure**
    *   Examine `ToolRack/win-cli-tool/` and `ToolRack/web-crawler/`.
    *   Confirm their implementation language (assume TypeScript or Python for now).
    *   Check their current project structure, build process, and entry points.

*   **Step 6.2 / 7.2: Apply Refactoring**
    *   If Python: Follow steps similar to Phase 3. Initialize with `uv init`, add shared utils, integrate config/logging.
    *   If TypeScript: Follow steps similar to Phase 4/5. Initialize with `npm init`, add shared utils, TS config, build script, integrate config/logging.
    *   Ensure they have their own `README.md` and `.env.example` (or rely on the root one).

*   **Step 6.3 / 7.3: Update `mcp.json.example`**
    *   Add new entries or update existing ones for these tools.
    *   Use *absolute paths* for `command` (node.exe or specific uv.exe) and script paths in `args`.
    *   Set `cwd` to the tool's root directory.
    *   Add any necessary `env` variables.

*   **Step 6.4 / 7.4: Test**
    *   Build, run, and thoroughly test each refactored tool. Check logs.

---

## Phase 8: Documentation & Finalization

**Purpose:** Update documentation and finalize the refactoring branch.

*   **Step 8.1: Update Main `README.md`**
    *   Edit the root `README.md`.
    *   Add a section about the `Utils/` directory and the shared utility packages (`thetoolshed_mcp_utils_py`, `@thetoolshed/mcp-utils-ts`).
    *   Describe the standardized environment setup (root `.env.example`, `ruff.toml`, `Logs/` directory).
    *   Mention that `ToolRack/` tools now leverage these shared utilities and follow consistent patterns.

*   **Step 8.2: Review All Tool and Utility READMEs**
    *   Ensure `README.md` files within each directory in `ToolRack/` and `Utils/` are:
        *   Present and accurate.
        *   Explain how to set up, configure (mentioning `.env` usage), build, and run the specific tool/utility.
        *   Reflect the use of shared utilities.

*   **Step 8.3: Finalize `mcp.json.example`**
    *   Perform a comprehensive review of `mcp.json.example`.
    *   Confirm all `command` paths are absolute and correct for the respective environments.
    *   Confirm all `args` script paths are absolute.
    *   Confirm `cwd` is set for each server to its root directory.
    *   Ensure `env` sections are correctly defined for tools needing specific API keys.

*   **Step 8.4: Commit Changes**
    ```powershell
    git status
    git add .
    git commit -m "refactor(ToolRack): Implement standardized environment and shared utils"
    ```
    *   Consider merging this branch back into the main development branch after thorough review and testing.

---